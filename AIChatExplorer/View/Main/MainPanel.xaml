<UserControl
    x:Class="AIChatExplorer.View.Main.MainPanel"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:commonModel="clr-namespace:LibUIPythonAI.Resource;assembly=LibUIPythonAI"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:editorControl="clr-namespace:LibUIPythonAI.Control.Editor;assembly=LibUIPythonAI"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:local="clr-namespace:AIChatExplorer.View.Main"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:res="clr-namespace:AIChatExplorer.View.Main"
    xmlns:viewModel="clr-namespace:AIChatExplorer.ViewModel.Main"
    x:Name="Root"
    d:DataContext="{d:DesignInstance Type=viewModel:MainPanelViewModel}"
    mc:Ignorable="d">
    <UserControl.Resources>
        <ContextMenu
            x:Key="GridRowContextMenu"
            FontSize="12"
            ItemsSource="{Binding ContentItemMenuItems}" />
        <Style x:Key="SingleLineTextBlock" TargetType="{x:Type TextBlock}">
            <Setter Property="Height" Value="15" />
            <Setter Property="TextWrapping" Value="NoWrap" />
            <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        </Style>
    </UserControl.Resources>
    <i:Interaction.Triggers>
        <i:EventTrigger EventName="Loaded">
            <i:InvokeCommandAction Command="{Binding LoadedCommand, Mode=OneTime}" PassEventArgsToCommand="True" />
        </i:EventTrigger>
        <i:EventTrigger EventName="Activated">
            <i:InvokeCommandAction Command="{Binding ActivatedCommand, Mode=OneTime}" />
        </i:EventTrigger>
    </i:Interaction.Triggers>
    <Grid>
        <!--  TreeView, ListBox  -->
        <Grid.ColumnDefinitions>
            <!--  1. TreeView, 2. GridSplitter, 3. ListBox  -->
            <!--  Insert GridSplitter between TreeView and ListBox  -->
            <ColumnDefinition Width="300" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <!--  Folder TreeView  -->
        <Grid>
            <!--  Folder TreeView  -->
            <TreeView
                x:Name="FolderTreeView"
                Grid.Column="0"
                Background="White"
                ItemsSource="{Binding MainPanelTreeViewControlViewModel.RootFolderViewModelContainer.FolderViewModels}">
                <TreeView.ItemContainerStyle>
                    <Style TargetType="TreeViewItem">
                        <Setter Property="Margin" Value="3,3,3,3" />
                    </Style>
                </TreeView.ItemContainerStyle>
                <TreeView.ItemTemplate>
                    <HierarchicalDataTemplate DataType="local:ApplicationItemFolderViewModel" ItemsSource="{Binding Children}">
                        <!--  Tree item  -->
                        <!--  Set HorizontalAlignment to Stretch to match the outer size on the left and right  -->
                        <DockPanel HorizontalAlignment="Stretch">
                            <materialDesign:PackIcon
                                Width="18"
                                Height="18"
                                Foreground="{DynamicResource MaterialDesign.Brush.Primary.Light}"
                                Kind="Folder" />
                            <TextBlock
                                Margin="0,3,0,0"
                                DockPanel.Dock="Left"
                                FontSize="12"
                                Foreground="#616161"
                                Style="{StaticResource MaterialDesignBodyMediumTextBlock}"
                                Text="{Binding FolderName}" />
                            <DockPanel.ContextMenu>
                                <!--  Folder context menu  -->
                                <ContextMenu FontSize="12" ItemsSource="{Binding FolderMenuItems}" />
                            </DockPanel.ContextMenu>
                        </DockPanel>
                    </HierarchicalDataTemplate>
                </TreeView.ItemTemplate>
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectedItemChanged">
                        <i:InvokeCommandAction Command="{Binding MainPanelTreeViewControlViewModel.FolderSelectionChangedCommand, Mode=OneTime}" PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <TreeView.InputBindings />
            </TreeView>
            <Grid.InputBindings>
                <!--  Reload items from LiteDB  -->
                <KeyBinding
                    Key="R"
                    Command="{Binding MainPanelTreeViewControlViewModel.ReloadCommand, Mode=OneTime}"
                    Modifiers="Control" />
                <!--  Cut Folder  -->
                <KeyBinding
                    Key="X"
                    Command="{Binding MainPanelTreeViewControlViewModel.CutFolderCommand, Mode=OneTime}"
                    Modifiers="Control" />
                <KeyBinding
                    Key="N"
                    Command="{Binding MainPanelTreeViewControlViewModel.CreateItemCommand, Mode=OneTime}"
                    Modifiers="Control" />
                <!--  Paste items into selected folder  -->
                <KeyBinding
                    Key="V"
                    Command="{Binding MainPanelTreeViewControlViewModel.PasteCommand, Mode=OneTime}"
                    CommandParameter="{Binding}"
                    Modifiers="Control" />
            </Grid.InputBindings>
        </Grid>
        <GridSplitter
            Grid.Column="1"
            Width="5"
            HorizontalAlignment="Stretch" />

        <Grid Grid.Column="2">
            <!--  DataGrid, GridSplitter, Preview  -->
            <Grid.RowDefinitions>
                <RowDefinition Height="0.4*" />
                <RowDefinition Height="5" />
                <RowDefinition Height="0.6*" />
            </Grid.RowDefinitions>
            <Grid>
                <DataGrid
                    Grid.Row="0"
                    HorizontalAlignment="Stretch"
                    AutoGenerateColumns="False"
                    Background="White"
                    BorderThickness="1"
                    CanUserAddRows="True"
                    CanUserDeleteRows="False"
                    CanUserReorderColumns="False"
                    CanUserResizeColumns="True"
                    CanUserResizeRows="False"
                    CanUserSortColumns="True"
                    ItemsSource="{Binding MainPanelDataGridViewControlViewModel.SelectedFolder.Items, UpdateSourceTrigger=PropertyChanged}"
                    RowHeaderWidth="0"
                    SelectionMode="Extended"
                    SelectionUnit="FullRow"
                    VerticalScrollBarVisibility="Auto"
                    VirtualizingPanel.VirtualizationMode="Recycling"
                    VirtualizingStackPanel.IsVirtualizing="True">
                    <i:Interaction.Triggers>
                        <i:EventTrigger EventName="SelectionChanged">
                            <i:InvokeCommandAction Command="{Binding MainPanelDataGridViewControlViewModel.ApplicationItemSelectionChangedCommand}" PassEventArgsToCommand="True" />
                        </i:EventTrigger>
                    </i:Interaction.Triggers>
                    <DataGrid.InputBindings>
                        <!--  Open selected item window by double-clicking  -->
                        <MouseBinding
                            Command="{Binding MainPanelDataGridViewControlViewModel.OpenSelectedItemCommand}"
                            CommandParameter="{Binding}"
                            MouseAction="LeftDoubleClick" />
                        <!--  Open selected item  -->
                        <KeyBinding
                            Key="O"
                            Command="{Binding MainPanelDataGridViewControlViewModel.OpenSelectedItemCommand, Mode=OneTime}"
                            CommandParameter="{Binding}"
                            Modifiers="Control" />
                        <!--  Open selected item as file  -->
                        <KeyBinding
                            Key="O"
                            Command="{Binding MainPanelDataGridViewControlViewModel.OpenContentAsFileCommand, Mode=OneTime}"
                            CommandParameter="{Binding}"
                            Modifiers="Control+Shift" />

                        <KeyBinding
                            Key="X"
                            Command="{Binding MainPanelDataGridViewControlViewModel.CutItemCommand, Mode=OneTime}"
                            CommandParameter="{Binding}"
                            Modifiers="Control" />
                        <!--  Delete selected item  -->
                        <KeyBinding Key="Delete" Command="{Binding MainPanelDataGridViewControlViewModel.DeleteItemCommand, Mode=OneTime}" />
                        <!--  Delete displayed item  -->
                        <KeyBinding
                            Key="Delete"
                            Command="{Binding MainPanelDataGridViewControlViewModel.DeleteDisplayedItemCommand, Mode=OneTime}"
                            CommandParameter="{Binding}"
                            Modifiers="Control" />
                    </DataGrid.InputBindings>
                    <DataGrid.Columns>
                        <!--  IsPinned  -->
                        <DataGridCheckBoxColumn
                            Width="100"
                            Binding="{Binding IsPinned}"
                            Header="{x:Static res:ViewStringResources.Pin}" />
                        <!--  CreatedAt, UpdatedAt  -->
                        <DataGridTextColumn
                            Width="150"
                            MaxWidth="300"
                            Binding="{Binding CreatedAtString}"
                            ElementStyle="{StaticResource SingleLineTextBlock}"
                            Header="{x:Static res:ViewStringResources.CreateDate}"
                            IsReadOnly="True" />
                        <DataGridTextColumn
                            Width="150"
                            MaxWidth="300"
                            Binding="{Binding UpdatedAtString}"
                            ElementStyle="{StaticResource SingleLineTextBlock}"
                            Header="{x:Static res:ViewStringResources.UpdateDate}"
                            IsReadOnly="True" />
                        <!--  ContentType  -->
                        <DataGridTextColumn
                            Width="100"
                            Binding="{Binding ContentTypeString}"
                            ElementStyle="{StaticResource SingleLineTextBlock}"
                            Header="{x:Static res:ViewStringResources.Type}"
                            IsReadOnly="True" />
                        <DataGridTextColumn
                            Width="100"
                            Binding="{Binding TagsText}"
                            ElementStyle="{StaticResource SingleLineTextBlock}"
                            Header="{x:Static res:ViewStringResources.Tag}"
                            IsReadOnly="True" />
                        <DataGridTextColumn
                            Width="*"
                            Binding="{Binding DescriptionText}"
                            ElementStyle="{StaticResource SingleLineTextBlock}"
                            Header="{x:Static res:ViewStringResources.Title}"
                            IsReadOnly="True" />
                        <DataGridTextColumn
                            Width="*"
                            Binding="{Binding SourceApplicationTitleText}"
                            ElementStyle="{StaticResource SingleLineTextBlock}"
                            Header="{x:Static res:ViewStringResources.SourceTitle}"
                            IsReadOnly="True" />
                    </DataGrid.Columns>
                    <DataGrid.RowStyle>
                        <Style TargetType="DataGridRow">
                            <Setter Property="ContextMenu" Value="{StaticResource GridRowContextMenu}" />
                            <Setter Property="Margin" Value="0,5,0,0" />

                        </Style>
                    </DataGrid.RowStyle>
                    <DataGrid.CellStyle>
                        <Style TargetType="DataGridCell" />
                    </DataGrid.CellStyle>
                </DataGrid>
            </Grid>
            <GridSplitter
                Grid.Row="1"
                Height="5"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center" />
            <materialDesign:Card
                Grid.Row="2"
                Margin="3,3,3,3"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                materialDesign:ElevationAssist.Elevation="Dp8">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <TextBox
                        Name="DescriptionText"
                        Grid.Row="0"
                        Margin="10,10,10,10"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        FontSize="10pt"
                        IsReadOnly="True"
                        Text="{Binding MainPanelDataGridViewControlViewModel.SelectedItem.DescriptionText, Mode=OneWay}" />
                    <!--  TabControl タブ削除時にSelectedIndexのタブがNullとなった場合のため、FallbackValueとTargetNullValueを設定  -->
                    <TabControl
                        x:Name="MyTabControl"
                        Grid.Row="1"
                        Margin="10,3,10,3"
                        HorizontalContentAlignment="Left"
                        SelectedIndex="{Binding MainPanelDataGridViewControlViewModel.SelectedItem.SelectedTabIndex, TargetNullValue=-1}" />
                    <TextBlock
                        Name="headerText"
                        Grid.Row="2"
                        Margin="10,0,10,10"
                        HorizontalAlignment="Stretch"
                        FontSize="8pt"
                        Text="{Binding Path=MainPanelDataGridViewControlViewModel.SelectedItem.HeaderText}"
                        TextTrimming="None"
                        Visibility="{Binding PropertiesVisibility}" />
                    <Grid Grid.Row="3">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <CheckBox
                            Grid.Column="0"
                            Margin="10,0,10,10"
                            HorizontalAlignment="Left"
                            Content="{x:Static res:ViewStringResources.MarkdownView}"
                            FontSize="8pt"
                            IsChecked="{Binding CommonViewModelProperties.MarkdownView, UpdateSourceTrigger=PropertyChanged}" />
                        <CheckBox
                            Grid.Column="1"
                            Margin="10,0,10,10"
                            HorizontalAlignment="Left"
                            Content="{x:Static res:ViewStringResources.ShowProperties}"
                            FontSize="8pt"
                            IsChecked="{Binding ShowProperties}" />
                    </Grid>
                </Grid>
                <materialDesign:Card.InputBindings>
                    <!--  Open selected item window by double-clicking  -->
                    <MouseBinding
                        Command="{Binding MainPanelDataGridViewControlViewModel.OpenSelectedItemCommand}"
                        CommandParameter="{Binding}"
                        MouseAction="LeftDoubleClick" />
                </materialDesign:Card.InputBindings>
            </materialDesign:Card>
        </Grid>
    </Grid>
</UserControl>
