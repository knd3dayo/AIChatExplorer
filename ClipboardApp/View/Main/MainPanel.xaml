<UserControl
    x:Class="ClipboardApp.View.Main.MainPanel"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:commonModel="clr-namespace:QAChat.Resource;assembly=PythonAILibUI"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:editorControl="clr-namespace:WpfAppCommon.Control.Editor;assembly=WpfAppCommon"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:materialDesign="http://materialdesigninxaml.net/winfx/xaml/themes"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:viewModel="clr-namespace:ClipboardApp"
    x:Name="Root"
    d:DataContext="{d:DesignInstance Type=viewModel:MainWindowViewModel}"
    mc:Ignorable="d">
    <UserControl.Resources>
        <commonModel:CommonStringResources x:Key="StringResources" />
        <ContextMenu
            x:Key="GridRowContextMenu"
            FontSize="12"
            ItemsSource="{Binding ContentItemMenuItems}" />
        <Style x:Key="SingleLineTextBlock" TargetType="{x:Type TextBlock}">
            <Setter Property="Height" Value="15" />
            <Setter Property="TextWrapping" Value="NoWrap" />
            <Setter Property="TextTrimming" Value="CharacterEllipsis" />
        </Style>
    </UserControl.Resources>
    <Grid>
        <!--  TreeView, ListBox  -->
        <Grid.ColumnDefinitions>
            <!--  1. TreeView, 2. GridSplitter, 3. ListBox  -->
            <!--  Insert GridSplitter between TreeView and ListBox  -->
            <ColumnDefinition Width="300" />
            <ColumnDefinition Width="5" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>
        <!--  Folder TreeView  -->
        <TreeView Grid.Column="0" ItemsSource="{Binding RootFolderViewModelContainer.FolderViewModels}">
            <TreeView.ItemContainerStyle>
                <Style TargetType="TreeViewItem">
                    <Setter Property="Margin" Value="3,3,3,3" />
                </Style>
            </TreeView.ItemContainerStyle>
            <TreeView.ItemTemplate>
                <HierarchicalDataTemplate DataType="local:ClipboardItemFolderViewModel" ItemsSource="{Binding Children}">
                    <!--  Tree item  -->
                    <!--  Set HorizontalAlignment to Stretch to match the outer size on the left and right  -->
                    <DockPanel HorizontalAlignment="Stretch">
                        <materialDesign:PackIcon
                            Width="18"
                            Height="18"
                            Foreground="{DynamicResource MaterialDesign.Brush.Primary.Light}"
                            Kind="Folder" />
                        <TextBlock
                            Margin="0,3,0,0"
                            DockPanel.Dock="Left"
                            FontSize="12"
                            Foreground="#616161"
                            Style="{StaticResource MaterialDesignBodyMediumTextBlock}"
                            Text="{Binding FolderName}" />
                        <DockPanel.InputBindings>
                            <!--  Open folder on left click  -->
                            <!-- <MouseBinding  MouseAction="LeftClick" Command="{Binding OpenFolderCommand}" CommandParameter="{Binding}"/> -->
                        </DockPanel.InputBindings>
                        <DockPanel.ContextMenu>
                            <!--  Folder context menu  -->
                            <ContextMenu FontSize="12" ItemsSource="{Binding FolderMenuItems}" />
                        </DockPanel.ContextMenu>
                    </DockPanel>
                </HierarchicalDataTemplate>
            </TreeView.ItemTemplate>
            <i:Interaction.Triggers>
                <i:EventTrigger EventName="SelectedItemChanged">
                    <i:InvokeCommandAction Command="{Binding FolderSelectionChangedCommand, Mode=OneTime}" PassEventArgsToCommand="True" />
                </i:EventTrigger>
            </i:Interaction.Triggers>
            <TreeView.InputBindings>
                <!--  Reload items from LiteDB  -->
                <KeyBinding
                    Key="R"
                    Command="{Binding ReloadCommand, Mode=OneTime}"
                    Modifiers="Control" />
                <!--  Paste items into selected folder  -->
                <KeyBinding
                    Key="V"
                    Command="{Binding PasteCommand, Mode=OneTime}"
                    Modifiers="Control" />
                <!--  Cut Folder  -->
                <KeyBinding
                    Key="X"
                    Command="{Binding CutFolderCommand, Mode=OneTime}"
                    Modifiers="Control" />
            </TreeView.InputBindings>
        </TreeView>
        <GridSplitter
            Grid.Column="1"
            Width="5"
            HorizontalAlignment="Stretch" />

        <Grid Grid.Column="2">
            <!--  DataGrid, GridSplitter, Preview  -->
            <Grid.RowDefinitions>
                <RowDefinition Height="0.4*" />
                <RowDefinition Height="5" />
                <RowDefinition Height="0.6*" />
            </Grid.RowDefinitions>
            <DataGrid
                Grid.Row="0"
                HorizontalAlignment="Stretch"
                AutoGenerateColumns="False"
                BorderThickness="1"
                CanUserAddRows="True"
                CanUserDeleteRows="False"
                CanUserReorderColumns="False"
                CanUserResizeColumns="True"
                CanUserResizeRows="False"
                CanUserSortColumns="True"
                ItemsSource="{Binding SelectedFolder.Items}"
                RowHeaderWidth="0"
                SelectionMode="Extended"
                SelectionUnit="FullRow"
                VerticalScrollBarVisibility="Auto"
                VirtualizingPanel.VirtualizationMode="Recycling"
                VirtualizingStackPanel.IsVirtualizing="True">
                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="SelectionChanged">
                        <i:InvokeCommandAction Command="{Binding ClipboardItemSelectionChangedCommand}" PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>
                <DataGrid.InputBindings>
                    <!--  Open selected item window by double-clicking  -->
                    <MouseBinding Command="{Binding OpenSelectedItemCommand}" MouseAction="LeftDoubleClick" />
                    <!--  Open selected item  -->
                    <KeyBinding
                        Key="O"
                        Command="{Binding OpenSelectedItemCommand, Mode=OneTime}"
                        Modifiers="Control" />
                    <!--  Open selected item as file  -->
                    <KeyBinding
                        Key="O"
                        Command="{Binding OpenContentAsFileCommand, Mode=OneTime}"
                        Modifiers="Control+Shift" />
                    <!--  Merge items into selected item  -->
                    <KeyBinding
                        Key="M"
                        Command="{Binding MergeItemCommand, Mode=OneTime}"
                        Modifiers="Control" />
                    <!--  Merge items into selected item with header  -->
                    <KeyBinding
                        Key="M"
                        Command="{Binding MergeItemWithHeaderCommand, Mode=OneTime}"
                        Modifiers="Control+Shift" />
                    <KeyBinding
                        Key="X"
                        Command="{Binding CutItemCommand, Mode=OneTime}"
                        Modifiers="Control" />
                    <!--  Paste items into selected folder  -->
                    <KeyBinding
                        Key="V"
                        Command="{Binding PasteCommand, Mode=OneTime}"
                        Modifiers="Control" />
                    <!--  Delete selected item  -->
                    <KeyBinding Key="Delete" Command="{Binding DeleteItemCommand, Mode=OneTime}" />
                    <!--  Delete displayed item  -->
                    <KeyBinding
                        Key="Delete"
                        Command="{Binding DeleteDisplayedItemCommand, Mode=OneTime}"
                        Modifiers="Control" />
                </DataGrid.InputBindings>
                <DataGrid.Columns>
                    <!--  IsPinned  -->
                    <DataGridCheckBoxColumn
                        Width="100"
                        Binding="{Binding IsPinned}"
                        Header="{Binding Source={StaticResource StringResources}, Mode=OneTime, Path=Instance.Pin}" />
                    <DataGridTextColumn
                        Width="150"
                        MaxWidth="300"
                        Binding="{Binding UpdatedAtString}"
                        ElementStyle="{StaticResource SingleLineTextBlock}"
                        Header="{Binding Source={StaticResource StringResources}, Mode=OneTime, Path=Instance.UpdateDate}"
                        IsReadOnly="True" />
                    <!--  LastVectorizedAt  -->
                    <DataGridTextColumn
                        Width="150"
                        MaxWidth="300"
                        Binding="{Binding VectorizedAtString}"
                        ElementStyle="{StaticResource SingleLineTextBlock}"
                        Header="{Binding Source={StaticResource StringResources}, Mode=OneTime, Path=Instance.VectorizedDate}"
                        IsReadOnly="True" />
                    <!--  ContentType  -->
                    <DataGridTextColumn
                        Width="100"
                        Binding="{Binding ContentTypeString}"
                        ElementStyle="{StaticResource SingleLineTextBlock}"
                        Header="{Binding Source={StaticResource StringResources}, Mode=OneTime, Path=Instance.Type}"
                        IsReadOnly="True" />
                    <DataGridTextColumn
                        Width="100"
                        Binding="{Binding TagsText}"
                        ElementStyle="{StaticResource SingleLineTextBlock}"
                        Header="{Binding Source={StaticResource StringResources}, Mode=OneTime, Path=Instance.Tag}"
                        IsReadOnly="True" />
                    <DataGridTextColumn
                        Width="*"
                        Binding="{Binding DescriptionText}"
                        ElementStyle="{StaticResource SingleLineTextBlock}"
                        Header="{Binding Source={StaticResource StringResources}, Mode=OneTime, Path=Instance.Title}"
                        IsReadOnly="True" />
                    <DataGridTextColumn
                        Width="*"
                        Binding="{Binding SourceApplicationTitleText}"
                        ElementStyle="{StaticResource SingleLineTextBlock}"
                        Header="{Binding Source={StaticResource StringResources}, Mode=OneTime, Path=Instance.SourceTitle}"
                        IsReadOnly="True" />
                </DataGrid.Columns>
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow">
                        <Setter Property="ContextMenu" Value="{StaticResource GridRowContextMenu}" />
                    </Style>
                </DataGrid.RowStyle>
            </DataGrid>
            <GridSplitter
                Grid.Row="1"
                Height="5"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Center"
                Visibility="{Binding PreviewModeVisibility}" />
            <materialDesign:Card
                Grid.Row="2"
                Margin="3,3,3,3"
                HorizontalAlignment="Stretch"
                VerticalAlignment="Stretch"
                materialDesign:ElevationAssist.Elevation="Dp8"
                Visibility="{Binding PreviewModeVisibility}">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="*" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>
                    <TextBox
                        Name="DescriptionText"
                        Grid.Row="0"
                        Margin="10,10,10,10"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Top"
                        FontSize="10pt"
                        IsReadOnly="True"
                        Text="{Binding SelectedItem.DescriptionText, Mode=OneWay}" />
                    <TabControl
                        Grid.Row="1"
                        Margin="10,3,10,3"
                        HorizontalContentAlignment="Left"
                        ItemsSource="{Binding SelectedItem.TabItems}"
                        SelectedIndex="{Binding SelectedItem.SelectedTabIndex}" />
                    <TextBlock
                        Name="headerText"
                        Grid.Row="2"
                        Margin="10,0,10,10"
                        HorizontalAlignment="Stretch"
                        FontSize="8pt"
                        Text="{Binding Path=SelectedItem.HeaderText}"
                        TextTrimming="None" />
                </Grid>
                <materialDesign:Card.InputBindings>
                    <!--  Open selected item window by double-clicking  -->
                    <MouseBinding
                        Command="{Binding OpenSelectedItemCommand}"
                        CommandParameter="{Binding}"
                        MouseAction="LeftDoubleClick" />
                </materialDesign:Card.InputBindings>
            </materialDesign:Card>
        </Grid>
    </Grid>
</UserControl>
